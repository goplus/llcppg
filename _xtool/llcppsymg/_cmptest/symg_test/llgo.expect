#stdout
=== Test Case: inireader ===
[{
		"mangle":	"_ZN9INIReaderC1EPKc",
		"c++":	"INIReader::INIReader(const char *)",
		"go":	"(*Reader).Init"
	}, {
		"mangle":	"_ZN9INIReaderC1EPKcl",
		"c++":	"INIReader::INIReader(const char *, long)",
		"go":	"(*Reader).Init__1"
	}, {
		"mangle":	"_ZN9INIReaderD1Ev",
		"c++":	"INIReader::~INIReader()",
		"go":	"(*Reader).Dispose"
	}, {
		"mangle":	"_ZNK9INIReader10ParseErrorEv",
		"c++":	"INIReader::ParseError()",
		"go":	"(*Reader).ModifyedParseError"
	}, {
		"mangle":	"_ZNK9INIReader3GetEPKcS1_S1_",
		"c++":	"INIReader::Get(const char *, const char *, const char *)",
		"go":	"(*Reader).Get"
	}]
=== Test Case: lua ===
[{
		"mangle":	"lua_concat",
		"c++":	"lua_concat(lua_State *, int)",
		"go":	"(*State).Concat"
	}, {
		"mangle":	"lua_error",
		"c++":	"lua_error(lua_State *)",
		"go":	"(*State).Error"
	}, {
		"mangle":	"lua_next",
		"c++":	"lua_next(lua_State *, int)",
		"go":	"(*State).Next"
	}, {
		"mangle":	"lua_stringtonumber",
		"c++":	"lua_stringtonumber(lua_State *, const char *)",
		"go":	"(*State).Stringtonumber"
	}]
=== Test Case: cjson ===
[{
		"mangle":	"cJSON_Delete",
		"c++":	"cJSON_Delete(cJSON *)",
		"go":	"(*CJSON).Delete"
	}, {
		"mangle":	"cJSON_ParseWithLength",
		"c++":	"cJSON_ParseWithLength(const char *, size_t)",
		"go":	"ParseWithLength"
	}, {
		"mangle":	"cJSON_Print",
		"c++":	"cJSON_Print(const cJSON *)",
		"go":	"(*CJSON).Print"
	}]
=== Test Case: isl ===
[{
		"mangle":	"isl_pw_qpolynomial_get_ctx",
		"c++":	"isl_pw_qpolynomial_get_ctx(isl_pw_qpolynomial *)",
		"go":	"(*IslPwQpolynomial).IslPwQpolynomialGetCtx"
	}]
=== Test Case: gpgerror ===
[{
		"mangle":	"gpg_strerror",
		"c++":	"gpg_strerror(gpg_error_t)",
		"go":	"ErrorT.Strerror"
	}, {
		"mangle":	"gpg_strerror_r",
		"c++":	"gpg_strerror_r(gpg_error_t, char *, size_t)",
		"go":	"ErrorT.StrerrorR"
	}, {
		"mangle":	"gpg_strsource",
		"c++":	"gpg_strsource(gpg_error_t)",
		"go":	"ErrorT.Strsource"
	}]

#stderr

#exit 0
