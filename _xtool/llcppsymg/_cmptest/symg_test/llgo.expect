#stdout
=== Test NewSymbolProcessor ===
Before: No prefixes After: Prefixes: [lua_ luaL_]

=== Test GenMethodName ===
Before: Class: INIReader, Name: INIReader After: (*INIReader).Init
Before: Class: INIReader, Name: INIReader After: (*INIReader).Dispose
Before: Class: INIReader, Name: HasValue After: (*INIReader).HasValue

=== Test AddSuffix ===
Before: Class: INIReader, Method: INIReader After: (*Reader).Init
Before: Class: INIReader, Method: INIReader After: (*Reader).Init__1
Before: Class: INIReader, Method: ParseError After: (*Reader).ParseError
Before: Class: INIReader, Method: HasValue After: (*Reader).HasValue

=== Test Case: C++ Class with Methods ===
Parsed Symbols:
Symbol Map GoName: (*Reader).Init__1, ProtoName In HeaderFile: INIReader::INIReader(const char *, int), MangledName: _ZN9INIReaderC1EPKci
Symbol Map GoName: (*Reader).Init, ProtoName In HeaderFile: INIReader::INIReader(const int &), MangledName: _ZN9INIReaderC1ERKi
Symbol Map GoName: (*Reader).Dispose, ProtoName In HeaderFile: INIReader::~INIReader(), MangledName: _ZN9INIReaderD1Ev
Symbol Map GoName: (*Reader).ParseError, ProtoName In HeaderFile: INIReader::ParseError(), MangledName: _ZNK9INIReader10ParseErrorEv

=== Test Case: C Functions ===
Parsed Symbols:
Symbol Map GoName: (*State).Compare, ProtoName In HeaderFile: lua_compare(lua_State *, int, int, int), MangledName: lua_compare
Symbol Map GoName: (*State).Rawequal, ProtoName In HeaderFile: lua_rawequal(lua_State *, int, int), MangledName: lua_rawequal
Symbol Map GoName: Sizecomp, ProtoName In HeaderFile: lua_sizecomp(int, int, int, int), MangledName: lua_sizecomp

=== Test Case: InvalidReceiver ===
Parsed Symbols:
Symbol Map GoName: (*Sqlite3).Errcode, ProtoName In HeaderFile: sqlite3_errcode(sqlite3 *), MangledName: sqlite3_errcode
Symbol Map GoName: UriParameter, ProtoName In HeaderFile: sqlite3_uri_parameter(sqlite3_filename, const char *), MangledName: sqlite3_uri_parameter

=== Test Case: InvalidReceiver PointerLevel > 1 ===
Parsed Symbols:
Symbol Map GoName: DerDecoding, ProtoName In HeaderFile: asn1_der_decoding(asn1_node *, const void *, int, char *), MangledName: asn1_der_decoding

=== Test Case: InvalidReceiver typ.NamedType.String is empty ===
Parsed Symbols:
Symbol Map GoName: InitWindow, ProtoName In HeaderFile: InitWindow(int, int, const char *), MangledName: InitWindow

=== Test Case: InvalidReceiver typ.canonicalType.Kind == clang.TypePointer ===
Parsed Symbols:
Symbol Map GoName: X__mpzSetUiSafe, ProtoName In HeaderFile: __mpz_set_ui_safe(mpz_ptr, unsigned long), MangledName: __mpz_set_ui_safe

=== Test Case: c ===
[{
		"mangle":	"Foo_Bar",
		"c++":	"Foo_Bar()",
		"go":	"Bar__1"
	}, {
		"mangle":	"Foo_BarMethod",
		"c++":	"Foo_BarMethod(Foo *)",
		"go":	"(*Foo).BarMethod"
	}, {
		"mangle":	"Foo_Delete",
		"c++":	"Foo_Delete(Foo *)",
		"go":	"Delete"
	}, {
		"mangle":	"Foo_ForBar",
		"c++":	"Foo_ForBar()",
		"go":	"Bar"
	}, {
		"mangle":	"Foo_ForBarMethod",
		"c++":	"Foo_ForBarMethod(Foo *)",
		"go":	"(*Foo).BarMethod__1"
	}, {
		"mangle":	"Foo_FunctionParse",
		"c++":	"Foo_FunctionParse()",
		"go":	"Parse"
	}, {
		"mangle":	"Foo_ParseWithLength",
		"c++":	"Foo_ParseWithLength(const char *, size_t)",
		"go":	"ParseWithLength"
	}, {
		"mangle":	"Foo_ParseWithSize",
		"c++":	"Foo_ParseWithSize(const char *, size_t)",
		"go":	"ParseWithSize"
	}, {
		"mangle":	"Foo_Prefix_BarMethod",
		"c++":	"Foo_Prefix_BarMethod(Foo *)",
		"go":	"(*Foo).BarMethod__2"
	}, {
		"mangle":	"Foo_Print",
		"c++":	"Foo_Print(const Foo *)",
		"go":	"(*Foo).Print"
	}, {
		"mangle":	"Foo_Receiver2Parse2",
		"c++":	"Foo_Receiver2Parse2(Foo2 *)",
		"go":	"(*Foo2).Parse"
	}, {
		"mangle":	"Foo_ReceiverParse",
		"c++":	"Foo_ReceiverParse(Foo *)",
		"go":	"(*Foo).Parse"
	}, {
		"mangle":	"Foo_ReceiverParse2",
		"c++":	"Foo_ReceiverParse2(Foo *)",
		"go":	"(*Foo).Parse__1"
	}, {
		"mangle":	"Foo_ignoreFunc",
		"c++":	"Foo_ignoreFunc()",
		"go":	"-"
	}]
=== Test Case: cpp ===
[{
		"mangle":	"_ZN3Foo6HasBarEv",
		"c++":	"Foo::HasBar()",
		"go":	"(*Foo).HasBar"
	}, {
		"mangle":	"_ZN3FooC1EPKc",
		"c++":	"Foo::Foo(const char *)",
		"go":	"(*Foo).Init"
	}, {
		"mangle":	"_ZN3FooC1EPKcl",
		"c++":	"Foo::Foo(const char *, long)",
		"go":	"(*Foo).Init__1"
	}, {
		"mangle":	"_ZN3FooD1Ev",
		"c++":	"Foo::~Foo()",
		"go":	"(*Foo).Dispose"
	}, {
		"mangle":	"_ZNK3Foo3GetEPKcS1_S1_",
		"c++":	"Foo::Get(const char *, const char *, const char *)",
		"go":	"(*Foo).Get"
	}, {
		"mangle":	"_ZNK3Foo8ParseBarEv",
		"c++":	"Foo::ParseBar()",
		"go":	"(*Foo).ModifyedParseBarEv"
	}]
=== Test Case: inireader ===
[{
		"mangle":	"_ZN9INIReaderC1EPKc",
		"c++":	"INIReader::INIReader(const char *)",
		"go":	"(*Reader).Init"
	}, {
		"mangle":	"_ZN9INIReaderC1EPKcl",
		"c++":	"INIReader::INIReader(const char *, long)",
		"go":	"(*Reader).Init__1"
	}, {
		"mangle":	"_ZN9INIReaderD1Ev",
		"c++":	"INIReader::~INIReader()",
		"go":	"(*Reader).Dispose"
	}, {
		"mangle":	"_ZNK9INIReader10ParseErrorEv",
		"c++":	"INIReader::ParseError()",
		"go":	"(*Reader).ModifyedParseError"
	}, {
		"mangle":	"_ZNK9INIReader3GetEPKcS1_S1_",
		"c++":	"INIReader::Get(const char *, const char *, const char *)",
		"go":	"(*Reader).Get"
	}]
=== Test Case: lua ===
[{
		"mangle":	"lua_concat",
		"c++":	"lua_concat(lua_State *, int)",
		"go":	"(*State).Concat"
	}, {
		"mangle":	"lua_error",
		"c++":	"lua_error(lua_State *)",
		"go":	"(*State).Error"
	}, {
		"mangle":	"lua_next",
		"c++":	"lua_next(lua_State *, int)",
		"go":	"(*State).Next"
	}, {
		"mangle":	"lua_stringtonumber",
		"c++":	"lua_stringtonumber(lua_State *, const char *)",
		"go":	"(*State).Stringtonumber"
	}]
=== Test Case: cjson ===
[{
		"mangle":	"cJSON_Delete",
		"c++":	"cJSON_Delete(cJSON *)",
		"go":	"(*CJSON).Delete"
	}, {
		"mangle":	"cJSON_ParseWithLength",
		"c++":	"cJSON_ParseWithLength(const char *, size_t)",
		"go":	"ParseWithLength"
	}, {
		"mangle":	"cJSON_Print",
		"c++":	"cJSON_Print(const cJSON *)",
		"go":	"(*CJSON).Print"
	}]
=== Test Case: isl ===
[{
		"mangle":	"isl_pw_qpolynomial_get_ctx",
		"c++":	"isl_pw_qpolynomial_get_ctx(isl_pw_qpolynomial *)",
		"go":	"(*IslPwQpolynomial).IslPwQpolynomialGetCtx"
	}]
=== Test Case: gpgerror ===
[{
		"mangle":	"gpg_strerror",
		"c++":	"gpg_strerror(gpg_error_t)",
		"go":	"ErrorT.Strerror"
	}, {
		"mangle":	"gpg_strerror_r",
		"c++":	"gpg_strerror_r(gpg_error_t, char *, size_t)",
		"go":	"ErrorT.StrerrorR"
	}, {
		"mangle":	"gpg_strsource",
		"c++":	"gpg_strsource(gpg_error_t)",
		"go":	"ErrorT.Strsource"
	}]

#stderr

#exit 0
