# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]

jobs:

  test:
    strategy:
      matrix:
        os:
          - macos-latest
          - ubuntu-24.04
        llvm: [18]
        llgo: [v0.10.0]
        go: [1.23]
    runs-on: ${{matrix.os}}
    steps:
    - uses: actions/checkout@v4
    - name: Setup llcppg environment
      uses: ./.github/actions/setup-llcppg
      with:
        go-version: ${{ matrix.go }}
        llvm-version: ${{ matrix.llvm }}
        llgo-version: ${{ matrix.llgo }}

    - name: Test llcppsymg & llcppsigfetch
      run: |
        llgo cmptest ./_xtool/llcppsigfetch/parse/cvt_test/...

        # llgo cmptest ./_xtool/llcppsymg/_cmptest/... causes 
        # panic: runtime error: index out of range [0] with length 0
        cd _xtool/llcppsymg/_cmptest
          
        # llgo cmptest ./... cause  lld: error: undefined symbol: sort.init
        # https://github.com/goplus/llgo/issues/944

        llgo cmptest ./args_test
        llgo cmptest ./clangutils_test
        llgo cmptest ./config_test
        llgo cmptest ./names_test
        llgo cmptest ./parse_test
        llgo cmptest ./symbol_test
        llgo cmptest ./symg_test

        cd ../../../

    - name: Test
      if: ${{!startsWith(matrix.os, 'macos')}}
      run: go test -v ./...

    - name: Test with coverage
      if: startsWith(matrix.os, 'macos')
      run: go test -v -coverprofile="coverage.txt" -covermode=atomic ./...

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{secrets.CODECOV_TOKEN}}
        slug: goplus/llcppg

    - name: Test demos
      run: |
        # TODO(lijie): force python3-embed to be linked with python-3.12-embed
        # Currently, python3-embed is python-3.13-embed, doesn't work with pytorch
        # Will remove this after pytorch is fixed.
        pcdir=$HOME/pc
        mkdir -p $pcdir
        libdir=$(pkg-config --variable=libdir python-3.12-embed)
        echo "libdir: $libdir"
        ln -s $libdir/pkgconfig/python-3.12-embed.pc $pcdir/python3-embed.pc
        export PKG_CONFIG_PATH=$pcdir
        bash .github/workflows/test_demo.sh

    - name: Test demos with generated pkgs
      if: startsWith(matrix.os, 'macos')
      run: |
        # install demo's lib
        brew install lua zlib isl libgpg-error raylib z3 sqlite3 gmp libxml2 libxslt

        export PKG_CONFIG_PATH="/opt/homebrew/opt/zlib/lib/pkgconfig"
        export PKG_CONFIG_PATH="/opt/homebrew/opt/sqlite/lib/pkgconfig:$PKG_CONFIG_PATH"
        export PKG_CONFIG_PATH="/opt/homebrew/opt/libxml2/lib/pkgconfig:$PKG_CONFIG_PATH"
        export PKG_CONFIG_PATH="/opt/homebrew/opt/libxslt/lib/pkgconfig:$PKG_CONFIG_PATH"
        pkg-config --cflags --libs sqlite3
        pkg-config --cflags --libs libxslt

        llcppgtest -demos ./_llcppgtest

    - name: Test demos with generated pkgs
      if: startsWith(matrix.os, 'ubuntu')
      run: |
        # install demo's lib
        sudo apt install liblua5.4-dev libsqlite3-dev libgmp-dev libgpg-error-dev zlib1g-dev libisl-dev libz3-dev -y
        llcppgtest -demo ./_llcppgtest/cjson -conf conf/linux
        llcppgtest -demo ./_llcppgtest/gmp -conf conf/linux
        llcppgtest -demo ./_llcppgtest/gpgerror -conf conf/linux
        llcppgtest -demo ./_llcppgtest/isl
        llcppgtest -demo ./_llcppgtest/lua -conf conf/linux
        llcppgtest -demo ./_llcppgtest/sqlite -conf conf/linux
        llcppgtest -demo ./_llcppgtest/z3 -conf conf/linux
        llcppgtest -demo ./_llcppgtest/zlib -conf conf/linux


