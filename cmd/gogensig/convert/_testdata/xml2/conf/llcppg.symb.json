[
  {
    "mangle": "xmlCharStrdup",
    "c++": "xmlCharStrdup(const char *)",
    "go": "CharStrdup"
  },
  {
    "mangle": "xmlCharStrndup",
    "c++": "xmlCharStrndup(const char *, int)",
    "go": "CharStrndup"
  },
  {
    "mangle": "xmlCheckUTF8",
    "c++": "xmlCheckUTF8(const unsigned char *)",
    "go": "CheckUTF8"
  },
  {
    "mangle": "xmlCheckVersion",
    "c++": "xmlCheckVersion(int)",
    "go": "CheckVersion"
  },
  {
    "mangle": "xmlGetUTF8Char",
    "c++": "xmlGetUTF8Char(const unsigned char *, int *)",
    "go": "GetUTF8Char"
  },
  {
    "mangle": "xmlStrEqual",
    "c++": "xmlStrEqual(const xmlChar *, const xmlChar *)",
    "go": "(*Char).StrEqual"
  },
  {
    "mangle": "xmlStrPrintf",
    "c++": "xmlStrPrintf(xmlChar *, int, const char *, ...)",
    "go": "(*Char).StrPrintf"
  },
  {
    "mangle": "xmlStrQEqual",
    "c++": "xmlStrQEqual(const xmlChar *, const xmlChar *, const xmlChar *)",
    "go": "(*Char).StrQEqual"
  },
  {
    "mangle": "xmlStrVPrintf",
    "c++": "xmlStrVPrintf(xmlChar *, int, const char *, int)",
    "go": "(*Char).StrVPrintf"
  },
  {
    "mangle": "xmlStrcasecmp",
    "c++": "xmlStrcasecmp(const xmlChar *, const xmlChar *)",
    "go": "(*Char).Strcasecmp"
  },
  {
    "mangle": "xmlStrcasestr",
    "c++": "xmlStrcasestr(const xmlChar *, const xmlChar *)",
    "go": "(*Char).Strcasestr"
  },
  {
    "mangle": "xmlStrcat",
    "c++": "xmlStrcat(xmlChar *, const xmlChar *)",
    "go": "(*Char).Strcat"
  },
  {
    "mangle": "xmlStrchr",
    "c++": "xmlStrchr(const xmlChar *, xmlChar)",
    "go": "(*Char).Strchr"
  },
  {
    "mangle": "xmlStrcmp",
    "c++": "xmlStrcmp(const xmlChar *, const xmlChar *)",
    "go": "(*Char).Strcmp"
  },
  {
    "mangle": "xmlStrdup",
    "c++": "xmlStrdup(const xmlChar *)",
    "go": "(*Char).Strdup"
  },
  {
    "mangle": "xmlStrlen",
    "c++": "xmlStrlen(const xmlChar *)",
    "go": "(*Char).Strlen"
  },
  {
    "mangle": "xmlStrncasecmp",
    "c++": "xmlStrncasecmp(const xmlChar *, const xmlChar *, int)",
    "go": "(*Char).Strncasecmp"
  },
  {
    "mangle": "xmlStrncat",
    "c++": "xmlStrncat(xmlChar *, const xmlChar *, int)",
    "go": "(*Char).Strncat"
  },
  {
    "mangle": "xmlStrncatNew",
    "c++": "xmlStrncatNew(const xmlChar *, const xmlChar *, int)",
    "go": "(*Char).StrncatNew"
  },
  {
    "mangle": "xmlStrncmp",
    "c++": "xmlStrncmp(const xmlChar *, const xmlChar *, int)",
    "go": "(*Char).Strncmp"
  },
  {
    "mangle": "xmlStrndup",
    "c++": "xmlStrndup(const xmlChar *, int)",
    "go": "(*Char).Strndup"
  },
  {
    "mangle": "xmlStrstr",
    "c++": "xmlStrstr(const xmlChar *, const xmlChar *)",
    "go": "(*Char).Strstr"
  },
  {
    "mangle": "xmlStrsub",
    "c++": "xmlStrsub(const xmlChar *, int, int)",
    "go": "(*Char).Strsub"
  },
  {
    "mangle": "xmlUTF8Charcmp",
    "c++": "xmlUTF8Charcmp(const xmlChar *, const xmlChar *)",
    "go": "(*Char).UTF8Charcmp"
  },
  {
    "mangle": "xmlUTF8Size",
    "c++": "xmlUTF8Size(const xmlChar *)",
    "go": "(*Char).UTF8Size"
  },
  {
    "mangle": "xmlUTF8Strlen",
    "c++": "xmlUTF8Strlen(const xmlChar *)",
    "go": "(*Char).UTF8Strlen"
  },
  {
    "mangle": "xmlUTF8Strloc",
    "c++": "xmlUTF8Strloc(const xmlChar *, const xmlChar *)",
    "go": "(*Char).UTF8Strloc"
  },
  {
    "mangle": "xmlUTF8Strndup",
    "c++": "xmlUTF8Strndup(const xmlChar *, int)",
    "go": "(*Char).UTF8Strndup"
  },
  {
    "mangle": "xmlUTF8Strpos",
    "c++": "xmlUTF8Strpos(const xmlChar *, int)",
    "go": "(*Char).UTF8Strpos"
  },
  {
    "mangle": "xmlUTF8Strsize",
    "c++": "xmlUTF8Strsize(const xmlChar *, int)",
    "go": "(*Char).UTF8Strsize"
  },
  {
    "mangle": "xmlUTF8Strsub",
    "c++": "xmlUTF8Strsub(const xmlChar *, int, int)",
    "go": "(*Char).UTF8Strsub"
  }
]
