===== sqlite3.go =====
package sqlite

import (
	"github.com/goplus/llgo/c"
	_ "unsafe"
)

const VERSION = "3.47.0"
const VERSION_NUMBER = 3047000
const SOURCE_ID = "2024-10-21 16:30:22 03a9703e27c44437c39363d0baf82db4ebc94538a0f28411c85dda156f82636e"
const OK = 0
const ERROR = 1
const INTERNAL = 2
const PERM = 3
const ABORT = 4
const BUSY = 5
const LOCKED = 6
const NOMEM = 7
const READONLY = 8
const INTERRUPT = 9
const IOERR = 10
const CORRUPT = 11
const NOTFOUND = 12
const FULL = 13
const CANTOPEN = 14
const PROTOCOL = 15
const EMPTY = 16
const SCHEMA = 17
const TOOBIG = 18
const CONSTRAINT = 19
const MISMATCH = 20
const MISUSE = 21
const NOLFS = 22
const AUTH = 23
const FORMAT = 24
const RANGE = 25
const NOTADB = 26
const NOTICE = 27
const WARNING = 28
const ROW = 100
const DONE = 101
const OPEN_READONLY = 0x00000001
const OPEN_READWRITE = 0x00000002
const OPEN_CREATE = 0x00000004
const OPEN_DELETEONCLOSE = 0x00000008
const OPEN_EXCLUSIVE = 0x00000010
const OPEN_AUTOPROXY = 0x00000020
const OPEN_URI = 0x00000040
const OPEN_MEMORY = 0x00000080
const OPEN_MAIN_DB = 0x00000100
const OPEN_TEMP_DB = 0x00000200
const OPEN_TRANSIENT_DB = 0x00000400
const OPEN_MAIN_JOURNAL = 0x00000800
const OPEN_TEMP_JOURNAL = 0x00001000
const OPEN_SUBJOURNAL = 0x00002000
const OPEN_SUPER_JOURNAL = 0x00004000
const OPEN_NOMUTEX = 0x00008000
const OPEN_FULLMUTEX = 0x00010000
const OPEN_SHAREDCACHE = 0x00020000
const OPEN_PRIVATECACHE = 0x00040000
const OPEN_WAL = 0x00080000
const OPEN_NOFOLLOW = 0x01000000
const OPEN_EXRESCODE = 0x02000000
const OPEN_MASTER_JOURNAL = 0x00004000
const IOCAP_ATOMIC = 0x00000001
const IOCAP_ATOMIC512 = 0x00000002
const IOCAP_ATOMIC1K = 0x00000004
const IOCAP_ATOMIC2K = 0x00000008
const IOCAP_ATOMIC4K = 0x00000010
const IOCAP_ATOMIC8K = 0x00000020
const IOCAP_ATOMIC16K = 0x00000040
const IOCAP_ATOMIC32K = 0x00000080
const IOCAP_ATOMIC64K = 0x00000100
const IOCAP_SAFE_APPEND = 0x00000200
const IOCAP_SEQUENTIAL = 0x00000400
const IOCAP_UNDELETABLE_WHEN_OPEN = 0x00000800
const IOCAP_POWERSAFE_OVERWRITE = 0x00001000
const IOCAP_IMMUTABLE = 0x00002000
const IOCAP_BATCH_ATOMIC = 0x00004000
const LOCK_NONE = 0
const LOCK_SHARED = 1
const LOCK_RESERVED = 2
const LOCK_PENDING = 3
const LOCK_EXCLUSIVE = 4
const SYNC_NORMAL = 0x00002
const SYNC_FULL = 0x00003
const SYNC_DATAONLY = 0x00010
const FCNTL_LOCKSTATE = 1
const FCNTL_GET_LOCKPROXYFILE = 2
const FCNTL_SET_LOCKPROXYFILE = 3
const FCNTL_LAST_ERRNO = 4
const FCNTL_SIZE_HINT = 5
const FCNTL_CHUNK_SIZE = 6
const FCNTL_FILE_POINTER = 7
const FCNTL_SYNC_OMITTED = 8
const FCNTL_WIN32_AV_RETRY = 9
const FCNTL_PERSIST_WAL = 10
const FCNTL_OVERWRITE = 11
const FCNTL_VFSNAME = 12
const FCNTL_POWERSAFE_OVERWRITE = 13
const FCNTL_PRAGMA = 14
const FCNTL_BUSYHANDLER = 15
const FCNTL_TEMPFILENAME = 16
const FCNTL_MMAP_SIZE = 18
const FCNTL_TRACE = 19
const FCNTL_HAS_MOVED = 20
const FCNTL_SYNC = 21
const FCNTL_COMMIT_PHASETWO = 22
const FCNTL_WIN32_SET_HANDLE = 23
const FCNTL_WAL_BLOCK = 24
const FCNTL_ZIPVFS = 25
const FCNTL_RBU = 26
const FCNTL_VFS_POINTER = 27
const FCNTL_JOURNAL_POINTER = 28
const FCNTL_WIN32_GET_HANDLE = 29
const FCNTL_PDB = 30
const FCNTL_BEGIN_ATOMIC_WRITE = 31
const FCNTL_COMMIT_ATOMIC_WRITE = 32
const FCNTL_ROLLBACK_ATOMIC_WRITE = 33
const FCNTL_LOCK_TIMEOUT = 34
const FCNTL_DATA_VERSION = 35
const FCNTL_SIZE_LIMIT = 36
const FCNTL_CKPT_DONE = 37
const FCNTL_RESERVE_BYTES = 38
const FCNTL_CKPT_START = 39
const FCNTL_EXTERNAL_READER = 40
const FCNTL_CKSM_FILE = 41
const FCNTL_RESET_CACHE = 42
const FTS5_TOKENIZE_QUERY = 0x0001
const FTS5_TOKENIZE_PREFIX = 0x0002
const FTS5_TOKENIZE_DOCUMENT = 0x0004
const FTS5_TOKENIZE_AUX = 0x0008
const FTS5_TOKEN_COLOCATED = 0x0001

//go:linkname Libversion C.sqlite3_libversion
func Libversion() *c.Char

//go:linkname Sourceid C.sqlite3_sourceid
func Sourceid() *c.Char

//go:linkname LibversionNumber C.sqlite3_libversion_number
func LibversionNumber() c.Int

/*
** CAPI3REF: Run-Time Library Compilation Options Diagnostics
**
** ^The sqlite3_compileoption_used() function returns 0 or 1
** indicating whether the specified option was defined at
** compile time.  ^The SQLITE_ prefix may be omitted from the
** option name passed to sqlite3_compileoption_used().
**
** ^The sqlite3_compileoption_get() function allows iterating
** over the list of options that were defined at compile time by
** returning the N-th compile time option string.  ^If N is out of range,
** sqlite3_compileoption_get() returns a NULL pointer.  ^The SQLITE_
** prefix is omitted from any strings returned by
** sqlite3_compileoption_get().
**
** ^Support for the diagnostic functions sqlite3_compileoption_used()
** and sqlite3_compileoption_get() may be omitted by specifying the
** [SQLITE_OMIT_COMPILEOPTION_DIAGS] option at compile time.
**
** See also: SQL functions [sqlite_compileoption_used()] and
** [sqlite_compileoption_get()] and the [compile_options pragma].
 */
//go:linkname CompileoptionUsed C.sqlite3_compileoption_used
func CompileoptionUsed(zOptName *c.Char) c.Int

//go:linkname CompileoptionGet C.sqlite3_compileoption_get
func CompileoptionGet(N c.Int) *c.Char

/*
** CAPI3REF: Test To See If The Library Is Threadsafe
**
** ^The sqlite3_threadsafe() function returns zero if and only if
** SQLite was compiled with mutexing code omitted due to the
** [SQLITE_THREADSAFE] compile-time option being set to 0.
**
** SQLite can be compiled with or without mutexes.  When
** the [SQLITE_THREADSAFE] C preprocessor macro is 1 or 2, mutexes
** are enabled and SQLite is threadsafe.  When the
** [SQLITE_THREADSAFE] macro is 0,
** the mutexes are omitted.  Without the mutexes, it is not safe
** to use SQLite concurrently from more than one thread.
**
** Enabling mutexes incurs a measurable performance penalty.
** So if speed is of utmost importance, it makes sense to disable
** the mutexes.  But for maximum safety, mutexes should be enabled.
** ^The default behavior is for mutexes to be enabled.
**
** This interface can be used by an application to make sure that the
** version of SQLite that it is linking against was compiled with
** the desired setting of the [SQLITE_THREADSAFE] macro.
**
** This interface only reports on the compile-time mutex setting
** of the [SQLITE_THREADSAFE] flag.  If SQLite is compiled with
** SQLITE_THREADSAFE=1 or =2 then mutexes are enabled by default but
** can be fully or partially disabled using a call to [sqlite3_config()]
** with the verbs [SQLITE_CONFIG_SINGLETHREAD], [SQLITE_CONFIG_MULTITHREAD],
** or [SQLITE_CONFIG_SERIALIZED].  ^(The return value of the
** sqlite3_threadsafe() function shows only the compile-time setting of
** thread safety, not any run-time changes to that setting made by
** sqlite3_config(). In other words, the return value from sqlite3_threadsafe()
** is unchanged by calls to sqlite3_config().)^
**
** See the [threading mode] documentation for additional information.
 */
//go:linkname Threadsafe C.sqlite3_threadsafe
func Threadsafe() c.Int

type Sqlite3 struct {
	Unused [8]uint8
}
type SqliteInt64 c.LongLong
type SqliteUint64 c.UlongLong
type Int64 SqliteInt64
type Uint64 SqliteUint64

/*
** CAPI3REF: Closing A Database Connection
** DESTRUCTOR: sqlite3
**
** ^The sqlite3_close() and sqlite3_close_v2() routines are destructors
** for the [sqlite3] object.
** ^Calls to sqlite3_close() and sqlite3_close_v2() return [SQLITE_OK] if
** the [sqlite3] object is successfully destroyed and all associated
** resources are deallocated.
**
** Ideally, applications should [sqlite3_finalize | finalize] all
** [prepared statements], [sqlite3_blob_close | close] all [BLOB handles], and
** [sqlite3_backup_finish | finish] all [sqlite3_backup] objects associated
** with the [sqlite3] object prior to attempting to close the object.
** ^If the database connection is associated with unfinalized prepared
** statements, BLOB handlers, and/or unfinished sqlite3_backup objects then
** sqlite3_close() will leave the database connection open and return
** [SQLITE_BUSY]. ^If sqlite3_close_v2() is called with unfinalized prepared
** statements, unclosed BLOB handlers, and/or unfinished sqlite3_backups,
** it returns [SQLITE_OK] regardless, but instead of deallocating the database
** connection immediately, it marks the database connection as an unusable
** "zombie" and makes arrangements to automatically deallocate the database
** connection after all prepared statements are finalized, all BLOB handles
** are closed, and all backups have finished. The sqlite3_close_v2() interface
** is intended for use with host languages that are garbage collected, and
** where the order in which destructors are called is arbitrary.
**
** ^If an [sqlite3] object is destroyed while a transaction is open,
** the transaction is automatically rolled back.
**
** The C parameter to [sqlite3_close(C)] and [sqlite3_close_v2(C)]
** must be either a NULL
** pointer or an [sqlite3] object pointer obtained
** from [sqlite3_open()], [sqlite3_open16()], or
** [sqlite3_open_v2()], and not previously closed.
** ^Calling sqlite3_close() or sqlite3_close_v2() with a NULL pointer
** argument is a harmless no-op.
 */
// llgo:link (*Sqlite3).Close C.sqlite3_close
func (recv_ *Sqlite3) Close() c.Int {
	return 0
}

// llgo:link (*Sqlite3).CloseV2 C.sqlite3_close_v2
func (recv_ *Sqlite3) CloseV2() c.Int {
	return 0
}

// llgo:type C
type Callback func(c.Pointer, c.Int, **c.Char, **c.Char) c.Int

/*
** CAPI3REF: One-Step Query Execution Interface
** METHOD: sqlite3
**
** The sqlite3_exec() interface is a convenience wrapper around
** [sqlite3_prepare_v2()], [sqlite3_step()], and [sqlite3_finalize()],
** that allows an application to run multiple statements of SQL
** without having to use a lot of C code.
**
** ^The sqlite3_exec() interface runs zero or more UTF-8 encoded,
** semicolon-separate SQL statements passed into its 2nd argument,
** in the context of the [database connection] passed in as its 1st
** argument.  ^If the callback function of the 3rd argument to
** sqlite3_exec() is not NULL, then it is invoked for each result row
** coming out of the evaluated SQL statements.  ^The 4th argument to
** sqlite3_exec() is relayed through to the 1st argument of each
** callback invocation.  ^If the callback pointer to sqlite3_exec()
** is NULL, then no callback is ever invoked and result rows are
** ignored.
**
** ^If an error occurs while evaluating the SQL statements passed into
** sqlite3_exec(), then execution of the current statement stops and
** subsequent statements are skipped.  ^If the 5th parameter to sqlite3_exec()
** is not NULL then any error message is written into memory obtained
** from [sqlite3_malloc()] and passed back through the 5th parameter.
** To avoid memory leaks, the application should invoke [sqlite3_free()]
** on error message strings returned through the 5th parameter of
** sqlite3_exec() after the error message string is no longer needed.
** ^If the 5th parameter to sqlite3_exec() is not NULL and no errors
** occur, then sqlite3_exec() sets the pointer in its 5th parameter to
** NULL before returning.
**
** ^If an sqlite3_exec() callback returns non-zero, the sqlite3_exec()
** routine returns SQLITE_ABORT without invoking the callback again and
** without running any subsequent SQL statements.
**
** ^The 2nd argument to the sqlite3_exec() callback function is the
** number of columns in the result.  ^The 3rd argument to the sqlite3_exec()
** callback is an array of pointers to strings obtained as if from
** [sqlite3_column_text()], one for each column.  ^If an element of a
** result row is NULL then the corresponding string pointer for the
** sqlite3_exec() callback is a NULL pointer.  ^The 4th argument to the
** sqlite3_exec() callback is an array of pointers to strings where each
** entry represents the name of corresponding result column as obtained
** from [sqlite3_column_name()].
**
** ^If the 2nd parameter to sqlite3_exec() is a NULL pointer, a pointer
** to an empty string, or a pointer that contains only whitespace and/or
** SQL comments, then no SQL statements are evaluated and the database
** is not changed.
**
** Restrictions:
**
** <ul>
** <li> The application must ensure that the 1st parameter to sqlite3_exec()
**      is a valid and open [database connection].
** <li> The application must not close the [database connection] specified by
**      the 1st parameter to sqlite3_exec() while sqlite3_exec() is running.
** <li> The application must not modify the SQL statement text passed into
**      the 2nd parameter of sqlite3_exec() while sqlite3_exec() is running.
** <li> The application must not dereference the arrays or string pointers
**       passed as the 3rd and 4th callback parameters after it returns.
** </ul>
 */
// llgo:link (*Sqlite3).Exec C.sqlite3_exec
func (recv_ *Sqlite3) Exec(sql *c.Char, callback func(c.Pointer, c.Int, **c.Char, **c.Char) c.Int, __llgo_arg_2 c.Pointer, errmsg **c.Char) c.Int {
	return 0
}

type File struct {
	PMethods *IoMethods
}

type IoMethods struct {
	IVersion               c.Int
	XClose                 c.Pointer
	XRead                  c.Pointer
	XWrite                 c.Pointer
	XTruncate              c.Pointer
	XSync                  c.Pointer
	XFileSize              c.Pointer
	XLock                  c.Pointer
	XUnlock                c.Pointer
	XCheckReservedLock     c.Pointer
	XFileControl           c.Pointer
	XSectorSize            c.Pointer
	XDeviceCharacteristics c.Pointer
	XShmMap                c.Pointer
	XShmLock               c.Pointer
	XShmBarrier            c.Pointer
	XShmUnmap              c.Pointer
	XFetch                 c.Pointer
	XUnfetch               c.Pointer
}

type Mutex struct {
	Unused [8]uint8
}

type ApiRoutines struct {
	AggregateContext     c.Pointer
	AggregateCount       c.Pointer
	BindBlob             c.Pointer
	BindDouble           c.Pointer
	BindInt              c.Pointer
	BindInt64            c.Pointer
	BindNull             c.Pointer
	BindParameterCount   c.Pointer
	BindParameterIndex   c.Pointer
	BindParameterName    c.Pointer
	BindText             c.Pointer
	BindText16           c.Pointer
	BindValue            c.Pointer
	BusyHandler          c.Pointer
	BusyTimeout          c.Pointer
	Changes              c.Pointer
	Close                c.Pointer
	CollationNeeded      c.Pointer
	CollationNeeded16    c.Pointer
	ColumnBlob           c.Pointer
	ColumnBytes          c.Pointer
	ColumnBytes16        c.Pointer
	ColumnCount          c.Pointer
	ColumnDatabaseName   c.Pointer
	ColumnDatabaseName16 c.Pointer
	ColumnDecltype       c.Pointer
	ColumnDecltype16     c.Pointer
	ColumnDouble         c.Pointer
	ColumnInt            c.Pointer
	ColumnInt64          c.Pointer
	ColumnName           c.Pointer
	ColumnName16         c.Pointer
	ColumnOriginName     c.Pointer
	ColumnOriginName16   c.Pointer
	ColumnTableName      c.Pointer
	ColumnTableName16    c.Pointer
	ColumnText           c.Pointer
	ColumnText16         c.Pointer
	ColumnType           c.Pointer
	ColumnValue          c.Pointer
	CommitHook           c.Pointer
	Complete             c.Pointer
	Complete16           c.Pointer
	CreateCollation      c.Pointer
	CreateCollation16    c.Pointer
	CreateFunction       c.Pointer
	CreateFunction16     c.Pointer
	CreateModule         c.Pointer
	DataCount            c.Pointer
	DbHandle             c.Pointer
	DeclareVtab          c.Pointer
	EnableSharedCache    c.Pointer
	Errcode              c.Pointer
	Errmsg               c.Pointer
	Errmsg16             c.Pointer
	Exec                 c.Pointer
	Expired              c.Pointer
	Finalize             c.Pointer
	Free                 c.Pointer
	FreeTable            c.Pointer
	GetAutocommit        c.Pointer
	GetAuxdata           c.Pointer
	GetTable             c.Pointer
	GlobalRecover        c.Pointer
	Interruptx           c.Pointer
	LastInsertRowid      c.Pointer
	Libversion           c.Pointer
	LibversionNumber     c.Pointer
	Malloc               c.Pointer
	Mprintf              c.Pointer
	Open                 c.Pointer
	Open16               c.Pointer
	Prepare              c.Pointer
	Prepare16            c.Pointer
	Profile              c.Pointer
	ProgressHandler      c.Pointer
	Realloc              c.Pointer
	Reset                c.Pointer
	ResultBlob           c.Pointer
	ResultDouble         c.Pointer
	ResultError          c.Pointer
	ResultError16        c.Pointer
	ResultInt            c.Pointer
	ResultInt64          c.Pointer
	ResultNull           c.Pointer
	ResultText           c.Pointer
	ResultText16         c.Pointer
	ResultText16be       c.Pointer
	ResultText16le       c.Pointer
	ResultValue          c.Pointer
	RollbackHook         c.Pointer
	SetAuthorizer        c.Pointer
	SetAuxdata           c.Pointer
	Xsnprintf            c.Pointer
	Step                 c.Pointer
	TableColumnMetadata  c.Pointer
	ThreadCleanup        c.Pointer
	TotalChanges         c.Pointer
	Trace                c.Pointer
	TransferBindings     c.Pointer
	UpdateHook           c.Pointer
	UserData             c.Pointer
	ValueBlob            c.Pointer
	ValueBytes           c.Pointer
	ValueBytes16         c.Pointer
	ValueDouble          c.Pointer
	ValueInt             c.Pointer
	ValueInt64           c.Pointer
	ValueNumericType     c.Pointer
	ValueText            c.Pointer
	ValueText16          c.Pointer
	ValueText16be        c.Pointer
	ValueText16le        c.Pointer
	ValueType            c.Pointer
	OverloadFunction     c.Pointer
	PrepareV2            c.Pointer
	Prepare16V2          c.Pointer
	ClearBindings        c.Pointer
	CreateModuleV2       c.Pointer
	BindZeroblob         c.Pointer
	BlobBytes            c.Pointer
	BlobClose            c.Pointer
	BlobOpen             c.Pointer
	BlobRead             c.Pointer
	BlobWrite            c.Pointer
	CreateCollationV2    c.Pointer
	FileControl          c.Pointer
	MemoryHighwater      c.Pointer
	MemoryUsed           c.Pointer
	MutexAlloc           c.Pointer
	MutexEnter           c.Pointer
	MutexFree            c.Pointer
	MutexLeave           c.Pointer
	MutexTry             c.Pointer
	OpenV2               c.Pointer
	ReleaseMemory        c.Pointer
	ResultErrorNomem     c.Pointer
	ResultErrorToobig    c.Pointer
	Sleep                c.Pointer
	SoftHeapLimit        c.Pointer
	VfsFind              c.Pointer
	VfsRegister          c.Pointer
	VfsUnregister        c.Pointer
	Xthreadsafe          c.Pointer
	ResultZeroblob       c.Pointer
	ResultErrorCode      c.Pointer
	TestControl          c.Pointer
	Randomness           c.Pointer
	ContextDbHandle      c.Pointer
	ExtendedResultCodes  c.Pointer
	Limit                c.Pointer
	NextStmt             c.Pointer
	Sql                  c.Pointer
	Status               c.Pointer
	BackupFinish         c.Pointer
	BackupInit           c.Pointer
	BackupPagecount      c.Pointer
	BackupRemaining      c.Pointer
	BackupStep           c.Pointer
	CompileoptionGet     c.Pointer
	CompileoptionUsed    c.Pointer
	CreateFunctionV2     c.Pointer
	DbConfig             c.Pointer
	DbMutex              c.Pointer
	DbStatus             c.Pointer
	ExtendedErrcode      c.Pointer
	Log                  c.Pointer
	SoftHeapLimit64      c.Pointer
	Sourceid             c.Pointer
	StmtStatus           c.Pointer
	Strnicmp             c.Pointer
	UnlockNotify         c.Pointer
	WalAutocheckpoint    c.Pointer
	WalCheckpoint        c.Pointer
	WalHook              c.Pointer
	BlobReopen           c.Pointer
	VtabConfig           c.Pointer
	VtabOnConflict       c.Pointer
	CloseV2              c.Pointer
	DbFilename           c.Pointer
	DbReadonly           c.Pointer
	DbReleaseMemory      c.Pointer
	Errstr               c.Pointer
	StmtBusy             c.Pointer
	StmtReadonly         c.Pointer
	Stricmp              c.Pointer
	UriBoolean           c.Pointer
	UriInt64             c.Pointer
	UriParameter         c.Pointer
	WalCheckpointV2      c.Pointer
	AutoExtension        c.Pointer
	BindBlob64           c.Pointer
	BindText64           c.Pointer
	CancelAutoExtension  c.Pointer
	LoadExtension        c.Pointer
	Malloc64             c.Pointer
	Msize                c.Pointer
	Realloc64            c.Pointer
	ResetAutoExtension   c.Pointer
	ResultBlob64         c.Pointer
	ResultText64         c.Pointer
	Strglob              c.Pointer
	ValueDup             c.Pointer
	ValueFree            c.Pointer
	ResultZeroblob64     c.Pointer
	BindZeroblob64       c.Pointer
	ValueSubtype         c.Pointer
	ResultSubtype        c.Pointer
	Status64             c.Pointer
	Strlike              c.Pointer
	DbCacheflush         c.Pointer
	SystemErrno          c.Pointer
	TraceV2              c.Pointer
	ExpandedSql          c.Pointer
	SetLastInsertRowid   c.Pointer
	PrepareV3            c.Pointer
	Prepare16V3          c.Pointer
	BindPointer          c.Pointer
	ResultPointer        c.Pointer
	ValuePointer         c.Pointer
	VtabNochange         c.Pointer
	ValueNochange        c.Pointer
	VtabCollation        c.Pointer
	KeywordCount         c.Pointer
	KeywordName          c.Pointer
	KeywordCheck         c.Pointer
	StrNew               c.Pointer
	StrFinish            c.Pointer
	StrAppendf           c.Pointer
	StrAppend            c.Pointer
	StrAppendall         c.Pointer
	StrAppendchar        c.Pointer
	StrReset             c.Pointer
	StrErrcode           c.Pointer
	StrLength            c.Pointer
	StrValue             c.Pointer
	CreateWindowFunction c.Pointer
	NormalizedSql        c.Pointer
	StmtIsexplain        c.Pointer
	ValueFrombind        c.Pointer
	DropModules          c.Pointer
	HardHeapLimit64      c.Pointer
	UriKey               c.Pointer
	FilenameDatabase     c.Pointer
	FilenameJournal      c.Pointer
	FilenameWal          c.Pointer
	CreateFilename       c.Pointer
	FreeFilename         c.Pointer
	DatabaseFileObject   c.Pointer
	TxnState             c.Pointer
	Changes64            c.Pointer
	TotalChanges64       c.Pointer
	AutovacuumPages      c.Pointer
	ErrorOffset          c.Pointer
	VtabRhsValue         c.Pointer
	VtabDistinct         c.Pointer
	VtabIn               c.Pointer
	VtabInFirst          c.Pointer
	VtabInNext           c.Pointer
	Deserialize          c.Pointer
	Serialize            c.Pointer
	DbName               c.Pointer
	ValueEncoding        c.Pointer
	IsInterrupted        c.Pointer
	StmtExplain          c.Pointer
	GetClientdata        c.Pointer
	SetClientdata        c.Pointer
}

type Value struct {
	Unused [8]uint8
}

type Context struct {
	Unused [8]uint8
}

type Fts5ExtensionApi struct {
	IVersion           c.Int
	XUserData          c.Pointer
	XColumnCount       c.Pointer
	XRowCount          c.Pointer
	XColumnTotalSize   c.Pointer
	XTokenize          c.Pointer
	XPhraseCount       c.Pointer
	XPhraseSize        c.Pointer
	XInstCount         c.Pointer
	XInst              c.Pointer
	XRowid             c.Pointer
	XColumnText        c.Pointer
	XColumnSize        c.Pointer
	XQueryPhrase       c.Pointer
	XSetAuxdata        c.Pointer
	XGetAuxdata        c.Pointer
	XPhraseFirst       c.Pointer
	XPhraseNext        c.Pointer
	XPhraseFirstColumn c.Pointer
	XPhraseNextColumn  c.Pointer
	XQueryToken        c.Pointer
	XInstToken         c.Pointer
	XColumnLocale      c.Pointer
	XTokenizeV2        c.Pointer
}

type Fts5Context struct {
	Unused [8]uint8
}

type Fts5PhraseIter struct {
	A *c.Char
	B *c.Char
}

// llgo:type C
type Fts5ExtensionFunction func(*Fts5ExtensionApi, *Fts5Context, *Context, c.Int, **Value)

type Fts5Tokenizer struct {
	Unused [8]uint8
}

type Fts5TokenizerV2 struct {
	IVersion  c.Int
	XCreate   c.Pointer
	XDelete   c.Pointer
	XTokenize c.Pointer
}

type Fts5Tokenizer__1 struct {
	XCreate   c.Pointer
	XDelete   c.Pointer
	XTokenize c.Pointer
}

type Fts5Api struct {
	IVersion           c.Int
	XCreateTokenizer   c.Pointer
	XFindTokenizer     c.Pointer
	XCreateFunction    c.Pointer
	XCreateTokenizerV2 c.Pointer
	XFindTokenizerV2   c.Pointer
}

===== sqlite3ext.go =====
package sqlite

import (
	"github.com/goplus/llgo/c"
	_ "unsafe"
)

// llgo:type C
type LoadextEntry func(*Sqlite3, **c.Char, *ApiRoutines) c.Int

===== sqlite_autogen_link.go =====
package sqlite

import _ "github.com/goplus/llgo/c"

const LLGoPackage string = "link: $(pkg-config --libs sqlite3);"

===== llcppg.pub =====
Fts5Context
Fts5ExtensionApi
Fts5PhraseIter
Fts5Tokenizer
fts5_api Fts5Api
fts5_extension_function Fts5ExtensionFunction
fts5_tokenizer Fts5Tokenizer__1
fts5_tokenizer_v2 Fts5TokenizerV2
sqlite3 Sqlite3
sqlite3_api_routines ApiRoutines
sqlite3_callback Callback
sqlite3_context Context
sqlite3_file File
sqlite3_int64 Int64
sqlite3_io_methods IoMethods
sqlite3_loadext_entry LoadextEntry
sqlite3_mutex Mutex
sqlite3_uint64 Uint64
sqlite3_value Value
sqlite_int64 SqliteInt64
sqlite_uint64 SqliteUint64