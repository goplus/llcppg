===== funcrefer_autogen_link.go =====
package funcrefer

import _ "github.com/goplus/lib/c"

const LLGoPackage string = "link: $(pkg-config --libs xxx);"

===== temp.go =====
package funcrefer

import (
	"github.com/goplus/lib/c"
	_ "unsafe"
)

// llgo:type C
type CallBack func(c.Pointer) c.Int

//go:linkname Exec C.exec
func Exec(L c.Pointer, cb CallBack)

//go:linkname Mprintf C.mprintf
func Mprintf(__llgo_arg_0 *c.Char, __llgo_va_list ...interface{}) *c.Char

type Hooks struct {
	MallocFn c.Pointer
	FreeFn   c.Pointer
}

type Stream struct {
	F  *c.FILE
	Cb CallBack
}

// llgo:type C
type OSSLProviderInitFn func(__llgo_va_list ...interface{})

//go:linkname ProviderInit2 C.OSSL_provider_init2
func ProviderInit2(__llgo_va_list ...interface{})

type OSSLCOREHANDLE struct {
	Unused [8]uint8
}

type OSSLDISPATCH struct {
	Unused [8]uint8
}

// llgo:type C
type OSSLProviderInitFn2 func(*OSSLCOREHANDLE, *OSSLDISPATCH, **OSSLDISPATCH, *c.Pointer) c.Int

//go:linkname ProviderInit C.OSSL_provider_init
func ProviderInit(*OSSLCOREHANDLE, *OSSLDISPATCH, **OSSLDISPATCH, *c.Pointer) c.Int

type OsslLibCtxSt struct {
	Unused [8]uint8
}
type OSSLLIBCTX OsslLibCtxSt

//go:linkname ProviderAddBuiltin C.OSSL_PROVIDER_add_builtin
func ProviderAddBuiltin(__llgo_arg_0 *OSSLLIBCTX, name *c.Char, init_fn OSSLProviderInitFn2) c.Int

===== llcppg.pub =====
CallBack
Hooks
OSSL_CORE_HANDLE OSSLCOREHANDLE
OSSL_DISPATCH OSSLDISPATCH
OSSL_LIB_CTX OSSLLIBCTX
OSSL_provider_init_fn OSSLProviderInitFn
OSSL_provider_init_fn2 OSSLProviderInitFn2
Stream
ossl_lib_ctx_st OsslLibCtxSt